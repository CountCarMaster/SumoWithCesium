{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/class.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","toString","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","generate","constructor","Message","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","field","safeProp","repeated","create","genValuePartial_fromObject","fieldIndex","prop","resolvedType","Enum","values","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","index","indexOf","missing","decoder","filter","group","ref","id","keyType","types","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","bytes","ReflectionObject","valuesById","comments","className","fromJSON","json","toJSON","add","comment","isString","isInteger","allow_alias","remove","Field","rule","extend","ruleRe","toLowerCase","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Type_","Service_","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","self","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skip","skipType","BufferReader_","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","m","q","s","oneofs","extensions","reserved","_fieldsById","_ctor","fieldsById","isReservedId","isReservedName","setup","fork","ldelim","bake","o","ucFirst","toUpperCase","a","zero","toNumber","zzEncode","zeroHash","parseInt","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","newError","CustomError","captureStackTrace","stack","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","lazyResolve","lazyTypes","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(20),\r\n    util    = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = Class.generate(type).eof(type.name); // named constructor function (codegen is required anyway)\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} type Type to use\r\n * @returns {Codegen} Codegen instance\r\n */\r\nClass.generate = function generate(type) { // eslint-disable-line no-unused-vars\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"p\");\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < type.fieldsArray.length; ++i)\r\n        if ((field = type._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p){\")\r\n        (\"for(var ks=Object.keys(p),i=0;i<ks.length;++i)\")\r\n            (\"this[ks[i]]=p[ks[i]];\")\r\n    (\"}\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n * @deprecated since 6.7.0 it's possible to just assign a new constructor to {@link Type#ctor}\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(33);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(32),\r\n    util     = require(33);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s&&%s.length){\", ref, ref);\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) {\r\n\r\n                if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @typedef EnumDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {EnumDescriptor} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @returns {EnumDescriptor} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(32),\r\n    util  = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @typedef FieldDescriptor\r\n * @type {Object}\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @typedef ExtensionFieldDescriptor\r\n * @type {Object}\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {string} extend Extended type\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {FieldDescriptor} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @returns {FieldDescriptor} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(31);\r\n\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary packed option (parser adds this) if not referencing an enum\r\n    if (this.options && this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n        delete this.options.packed;\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(36);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(23);\r\nprotobuf.Namespace        = require(22);\r\nprotobuf.Root             = require(27);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(31);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(24);\r\nprotobuf.MapField         = require(19);\r\nprotobuf.Service          = require(30);\r\nprotobuf.Method           = require(21);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(11);\r\nprotobuf.Message          = require(20);\r\n\r\n// Utility\r\nprotobuf.types            = require(32);\r\nprotobuf.util             = require(33);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(37);\r\nprotobuf.BufferWriter = require(38);\r\nprotobuf.Reader       = require(25);\r\nprotobuf.BufferReader = require(26);\r\n\r\n// Utility\r\nprotobuf.util         = require(35);\r\nprotobuf.rpc          = require(28);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @typedef MapFieldDescriptor\r\n * @type {Object}\r\n * @property {string} keyType Key type\r\n * @property {string} type Value type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @typedef ExtensionMapFieldDescriptor\r\n * @type {Object}\r\n * @property {string} keyType Key type\r\n * @property {string} type Value type\r\n * @property {number} id Field id\r\n * @property {string} extend Extended type\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {MapFieldDescriptor} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @returns {MapFieldDescriptor} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * @typedef MethodDescriptor\r\n * @type {Object}\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {MethodDescriptor} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @returns {MethodDescriptor} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(15),\r\n    Field    = require(16),\r\n    util     = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedDescriptor\r\n * @type {EnumDescriptor|TypeDescriptor|ServiceDescriptor|ExtensionFieldDescriptor|ExtensionMapFieldDescriptor}\r\n */\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @typedef NamespaceDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedDescriptor>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @returns {NamespaceDescriptor} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedDescriptor>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(33);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {?string}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @typedef OneOfDescriptor\r\n * @type {Object}\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {OneOfDescriptor} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @returns {OneOfDescriptor} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(25);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(22);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    util    = require(33);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {NamespaceDescriptor} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(35);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object.<string,*>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n *\r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object.<string,*>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(22);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(21),\r\n    util   = require(33),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @typedef ServiceDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,*>} [options] Service options\r\n * @property {Object.<string,MethodDescriptor>} methods Method descriptors\r\n * @property {Object.<string,AnyNestedDescriptor>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {ServiceDescriptor} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @returns {ServiceDescriptor} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(22);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(24),\r\n    Field     = require(16),\r\n    MapField  = require(19),\r\n    Service   = require(30),\r\n    Class     = require(11),\r\n    Message   = require(20),\r\n    Reader    = require(25),\r\n    Writer    = require(37),\r\n    util      = require(33),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(36),\r\n    converter = require(12);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                Class(this, ctor);\r\n            else\r\n                this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @typedef TypeDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,*>} [options] Message type options\r\n * @property {Object.<string,OneOfDescriptor>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,FieldDescriptor>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n * @property {Object.<string,AnyNestedDescriptor>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {TypeDescriptor} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @returns {TypeDescriptor} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(34);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/*\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @typedef Buffer\r\n * @type {Uint8Array}\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/*\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {function} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>=} properties Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message}\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n * @deprecated since 6.7.0 static code does not emit lazy types anymore\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations. Longs, enums and bytes are converted to strings by default.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(33);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen(\"m\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!=null){\", ref) // !== undefined && !== null\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!=null){\", ref) // !== undefined && !== null\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.optional) gen\r\n            (\"if(%s!=null){\", ref); // !== undefined && !== null\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (field.optional) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(37);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(35);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}